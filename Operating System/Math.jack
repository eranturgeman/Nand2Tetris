// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */


class Math {
    static Array twoPower;
    static int divideHelper;

    /** Initializes the library. */
    function void init() {
        var int i, val;

        let twoPower = Array.new(16);
        let i = 0;
        let val = 1;

        while(i < 16){
            let twoPower[i] = val;
            let val = (^val);
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return (~(x - 1));
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        var boolean isNonNeg;

        let sum = 0;
        let i = 0;
        let isNonNeg = (~(y < 0));
        let shiftedX = x;

        while((i < 16) & (~(shiftedX = 0))){
            if(Math.bit(y,i) = true){
                let sum = sum + shiftedX;
            }
            let shiftedX = (^shiftedX);
            let i = i + 1;
            if(isNonNeg & (twoPower[i] > y)){
            // takes care to stop the iterations if we reach all 0 in y
                return sum;
            }
        }
        return sum;

    }

    function boolean bit(int num, int i){
        if(num & (twoPower[i])){
            return true;
        }
        return false;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		// This should be implemented without using multiplication.
		// Hint: updating the value of 2*q*y in the "if" statement requires
		// at most a single addition operator at every recursion step.
		var int posX, posY, result;

		if((x = 0) | (y = 0)){
		    return 0;
		}

		let posX = Math.abs(x);
		let posY = Math.abs(y);
		let result = Math.dividePositive(posX, posY);

		if(((x < 0) & (y > 0)) | ((x > 0) & (y < 0))){
		    return (-result);
		}
		return result;
    }

    function int dividePositive(int x, int y){
        var int q;

        if((y > x) | (y < 0)){
            let divideHelper = 0;
            return 0;
        }

        let q = Math.dividePositive(x, (^y));
        if((x - divideHelper) < y){
            return (^q);
        }else{
            let divideHelper = divideHelper + y;
            return ((^q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		// This should be implemented without using division, but
		// multiplication is allowed.
		var int j, y, tmp, tmpSquared;

		let j = 7;
		let y = 0;

		while(~(j < 0)){
		    let tmp = (y + twoPower[j]);
		    let tmpSquared = Math.multiply(tmp, tmp);
		    if((~(tmpSquared > x)) & (tmpSquared > 0)){
		        let y = tmp;
		    }
		    let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if((a - b) > 0){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if((a - b) > 0){
            return b;
        }
        return a;
    }
}
