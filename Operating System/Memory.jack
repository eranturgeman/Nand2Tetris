// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;
    //heap address is 2048


    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
        let freeList = 2048;
        let freeList[0] = 14335;
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

        var int currentAddress, prevAddress;
        var int segmentSizePlaceHolder, pointerPlaceHolder, tmp;
        var boolean allocationFound;

        let currentAddress = freeList;
        let allocationFound = false;
        let prevAddress = 0;

        while((~(currentAddress = 0)) & (~(allocationFound))){
            if((Memory.peek(currentAddress) - 1) < size){
                let prevAddress = currentAddress;
                let currentAddress = Memory.peek(currentAddress + 1);
            }else{
                let allocationFound = true;
            }
        }

        if(~(currentAddress = 0)){
            if(prevAddress = 0){
                let segmentSizePlaceHolder = freeList[0];
                let pointerPlaceHolder = freeList[1];
                let freeList[0] = size + 1;
                let freeList[1] = null;
                let freeList = freeList + size + 1;
                let freeList[0] = (segmentSizePlaceHolder - size - 1);
                let freeList[1] = pointerPlaceHolder;

                if(~(freeList[0] > 0)){
                    let freeList = freeList[1];
                }
                return (currentAddress + 1);
            }else{
                if(((Memory.peek(currentAddress) - size - 1) > 1)){
                    let tmp = Memory.peek(currentAddress);
                    do Memory.poke(currentAddress, (tmp - size - 1));
                    do Memory.poke((currentAddress + tmp - size - 1), (size + 1));
                    return (currentAddress + tmp - size);
                }else{
                    let tmp = Memory.peek(currentAddress + 1);
                    do Memory.poke(prevAddress +  1, tmp); // take out + 1?

                    if((Memory.peek(currentAddress) - size - 1) = 1){
                        do Memory.poke((currentAddress + size + 1), -32767);
                    }

                    return (currentAddress + 1);

                }
            }
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var int address;

        if((o = null) | (o = -1)){
            return;
        }

        let address = freeList;
        while(~(Memory.peek((address + 1)) = 0)){
            let address = Memory.peek((address + 1));
        }
        do Memory.poke((address + 1), (o - 1));
        do Memory.poke(o, 0);
        return;
    }

    /** Returns the maximal element contained in the given Array/object. 
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int arraySize, i, max;

        let arraySize = Memory.peek(o - 1) - 1;

        let i = 1;
        let max = o[0];

        while(i < arraySize){
            let max = Math.max(max, o[i]);
            let i = i + 1;
        }
        do Output.println();
        return max;
    }
}
