// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maximumLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 0){
            do Sys.error(14);
        }

        let maximumLength = maxLength;
        if(maximumLength = 0){
            let str = Array.new(1);
        }else{
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        //check error code for too big j
        if(j > (maximumLength - 1) | j < 0){
            do Sys.error(15);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        //NOTICE: char c have to be provided as int
        if(j > (maximumLength - 1) | j < 0){
            do Sys.error(16);
        }

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        //NOTICE: char c have to be provided as int
        if(length = maximumLength){
            do Sys.error(17);
        }

        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length = 0){
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var char c;
        var boolean negative;


        if(length = 0){
            return 0;
        }

        if(charAt(0) = 45){
            let negative = true;
            let i = 1;
        }else{
            let negative = false;
            let i = 0;
        }

        let val = 0;
        while(i < length){
            let c = str[i];
            if(c > 47 & c < 58){
                let val = (val * 10) + (c - 48);
                let i = i + 1;
            }else{
                if(negative){
                    return (-val);
                }else{
                    return val;
                }
            }
        }
        if(negative){
            return (-val);
        }else{
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if(length = maximumLength){
            do Sys.error(19);
        }

        if(val < 0){
            let str[0] = 45; //starting with -
            let length = 1;
        }
        do intToString(Math.abs(val));
        return;
    }

    method void intToString(int val){
        var int lastDigit, divided;
        var int c;

        let divided = val / 10;
        let lastDigit = val - (divided * 10);
        let c = lastDigit + 48;
        if(val < 10){
            if(length = maximumLength){
                do Sys.error(19);
            }
            do appendChar(c);
        }else{
            do intToString(divided);
            if(length = maximumLength){
                do Sys.error(19);
            }
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
