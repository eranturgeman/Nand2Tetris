// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     //output from regular ALU
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2],
      f=instruction[1], no=instruction[0], out=outALU, zr=zrALU, ng=ngALU);

     //choosing if the shift is on X or Y
     Mux16(a=y, b=x, sel=instruction[4], out=shiftInput);

     //shift left on shiftInput
     ShiftLeft(in=shiftInput, out=leftShiftOut);

     //shift right on shiftInput
     ShiftRight(in=shiftInput, out=rightShiftOut);

     //choosing which shift required + calculating NG bit for shift operation
     Mux16(a=rightShiftOut, b=leftShiftOut, sel=instruction[5], out=shiftOut, out[0..7]=out1, out[8..15]=out2, out[15]=NGshift);
     
     //calculating ZR for shift operation
     Or8Way(in=out1, out=ORpart1);
     Or8Way(in=out2, out=ORpart2);
     Or(a=ORpart1, b=ORpart2, out=ORout);
     Not(in=ORout, out=ZRshift);

     //choosing which action to perform
     Mux16(a=shiftOut, b=outALU, sel=instruction[8], out=out);
     Mux(a=ZRshift, b=zrALU, sel=instruction[8], out=zr);
     Mux(a=NGshift, b=ngALU, sel=instruction[8], out=ng);  
}
